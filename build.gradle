import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.1.15'
}

version = "${mod_version}-${mc_version}"
group = "com.cerbon.${mod_id}"
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {

    mappings channel: 'parchment', version: "${parchment_version}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'queen_bee'

            mods {
                queen_bee {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'queen_bee'

            mods {
                queen_bee {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'queen_bee'

            mods {
                queen_bee {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'queen_bee', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                queen_bee {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        // location of the maven that hosts JEI files before January 2023
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation fg.deobf("curse.maven:geckolib-388172:${geckolib_version}")
//    implementation fg.deobf("curse.maven:the-bumblezone-forge-362479:4557907") //v6.7.20-1.19.4

    //JEI
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))
}

mixin {
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
    config "mixins.${mod_id}.json"
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = findProperty('CURSEFORGE_TOKEN')

    def mainFile = upload(523596, jar)
    mainFile.changelog = rootProject.file("CHANGELOG.md").getText('UTF-8')
    mainFile.changelogType = 'markdown'
    mainFile.releaseType = 'release'
    mainFile.addGameVersion("${mc_version}", "1.20.1")
    mainFile.addRequirement("geckolib")
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    versionName = "Queen Bee ${project.version}"
    versionNumber = "${project.version}"
    projectId = "BT6ySFDE"
    changelog = rootProject.file("CHANGELOG.md").getText('UTF-8')
    versionType = "release"
    uploadFile = jar
    gameVersions = ["${mc_version}", "1.20.1"]
    loaders = ["forge"]
    syncBodyFrom = rootProject.file("README.md").getText('UTF-8')
    dependencies {
        required.project "geckolib"
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "queen_bee",
                "Specification-Vendor"    : "queen_beesareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "queen_beesareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
